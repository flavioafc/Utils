1 - criar webapi
2 - criar models
3 - criar dbcontext
    public class ShopContext : DbContext
    {
        public ShopContext(DbContextOptions<ShopContext> options):base(options)
        {

        }
        public DbSet<Product> Products { get; set; }
        public DbSet<Order> Orders { get; set; }
    }
4 - edit project
	<ItemGroup>
		<DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="2.0.0" />
	</ItemGroup>

5 - Criar em appSettings.json
  "ConnectionStrings": {
    "BancoStringConnection": "server=(localdb)\\ProjectsV13; Database=DBWebbSys; Integrated Security=true; MultipleActiveResultSets=true;"
  }

6 - Startup.cs (incluir)
	    public IConfiguration _configuration { get; }
        public Startup(IConfiguration configuration)
        {
            _configuration = configuration;
        }

	    services.AddDbContext<ShopContext>(cfg=>
        {
            cfg.UseSqlServer(_configuration.GetConnectionString("BancoStringConnection"));
        });
7 - Alterar o program.cs assim:
    public static IWebHost BuildWebHost(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration(SetupConfiguration)
                .UseStartup<Startup>()
                .Build();

        private static void SetupConfiguration(WebHostBuilderContext ctx, IConfigurationBuilder builder)
        {
            //removing the deafult configuration options
            builder.Sources.Clear();
            builder.AddJsonFile("appsettings.json", false, true)
                .AddEnvironmentVariables();
        }
8 - no cmd, dotnet ef migrations add InitialDb
9 - dotnet ef database update
10 - criar interfaces de repositorio e implementa-las
Exemplo:
   public IEnumerable<Product> GetsProductsByCategory(string category)
        {
            return _ctx.Products
                .Where(c => c.Category == category)
                .ToList();
        }
11 - na controller utilizar
      private readonly IShopRepository _repo;
12 - criar o seeder.cs
13 - incluir no startup.cs funcao configure
   if (env.IsDevelopment())
            {
                //seed database
                using (var scope = app.ApplicationServices.CreateScope())
                {
                    var seeder = scope.ServiceProvider.GetService<ShopSeeder>();
                    seeder.Seed();
                }
            }
14 - Incluir no startup.cs funcao configureServices
            services.AddTransient<ShopSeeder>();
            services.AddScoped<IShopRepository, ShopRepository>();

15 - Controllers serao
        [HttpGet]
        public IActionResult Shop(){

		var results = _repo.GetAllProducts();

		return Ok(results.ToList());
		}
